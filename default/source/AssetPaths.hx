package;

/**
	Helper class to access asset paths in a type-safe manner. 

	`AssetPaths`'s static fields are autogenerated by a neat [Haxe macro](http://haxe.org/manual/macro.html) 
	from the contents of Project.xml's `<assets>` tag, so you can easily reference them in your code:

	```haxe
	// Play sound effect using AssetPaths
	FlxG.sound.play(AssetPaths.mySound__wav);
	// instead of using string path
	FlxG.sound.play("assets/sounds/mySound.wav");
	```

	Using `AssetPaths` make it safe to move(or rename) your assets - whenever that happens
	you are forced to fix, e.g. `AssetPaths.mySound__wav`, since `mySound__wav` is
	no longer there and it is a compilation error. What if in a similar situation you used plain strings?
	If you are lucky you will quickly get a runtime error (in debug mode). Otherwise finding why your
	game crashes might not be easy.

	## Features

	### Bad file names

	You will get a warning if there are problems with your assets names:

	- Filenames that do not match Haxe valid id pattern, e.g. starting with a digit.

		`assets/1.ogg` won't appear on `AssetPaths` since you cannot do `AssetPaths.1__ogg` in Haxe.
		If you don't want to rename the file you have to use it as a string:

		```haxe
		FlxG.sound.play("assets/1.ogg");

		// this wont work
		// FlxG.sound.play(AssetPaths.1__ogg);
		```

	- Duplicate file names

		If you have assets with the same file names, whichever file is nested deeper or found later 
		will be ignored. You will get a warning in that case.

		```haxe
		// assets folder:
		// assets/music/hero.ogg
		// assets/sounds/hero.ogg

		// prints "assets/music/hero.ogg"
		trace(AssetPaths.hero__ogg);
		```

	## More control

	`AssetPaths` is using `flixel.system.FlxAssets.buildFileReferences` (this method can be used to build any
	class). Check its documentation for more details.

	### Include and exclude

	These args can either be an `EReg`, or a wildcard string, similar to openfl's `project.xml args`. 
	For example to exclude everything in a folder called "test", as well as any .ase files, 
	you would use `~/\/test\/|\.ase/`

	```haxe
	@:build(flixel.system.FlxAssets.buildFileReferences("assets", true, null, ~/\/test\/|\.ase/))
	class AssetPaths {}
	```

	### Renaming

	You can provide `rename` function, e.g. to deal with duplicate names. Returning `null`
	means "ignore the file"

	```haxe
	// assets structure:
	// assets/music/hero.ogg
	// assets/sounds/hero.ogg

	// AssetPaths.hx
	@:build(flixel.system.FlxAssets.buildFileReferences("assets", true, null, null, function(name:String):Null<String> {
	return name.toLowerCase()
		.split("/")
		.join("_")
		.split("-")
		.join("_")
		.split(" ")
		.join("_")
		.split(".")
		.join("__");
	}))
	class AssetPaths {}

	// somewhere in your code
	FlxG.sound.play(AssetPaths.assets_music_hero__ogg);
	FlxG.sound.play(AssetPaths.assets_sounds_hero__ogg);
	```
**/
@:build(flixel.system.FlxAssets.buildFileReferences("assets", true))
class AssetPaths {}
